# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: api-dev-ci

on:
    pull_request:
        branches: [ dev ]
        paths:
            - 'src/app/api/**'
            - 'src/domain/auth/**'
            - 'src/domain/volunteer/**'
            - 'src/infrastructure/client/**'
            - 'src/infrastructure/storage/**'
            - 'src/support/logger/**'
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: xt0rted/pull-request-comment-branch@v1
              id: comment-branch
            - uses: actions/checkout@v2
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                    java-version: '17'
                    distribution: 'temurin'
            - name: Cache Gradle
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-
            - name: Grant execute permission for gradlew
              run: chmod +x gradlew
            - name: Lint-Check
              id: lintCheck
              run: ./gradlew :api:ktlintCheck
            - name: API Test
              id: apiTest
              run: ./gradlew :api:test
            - name: Storage Test
              id: storageTest
              run: ./gradlew :storage:test

            - name: Comment when Lint was Failed
              uses: peter-evans/create-or-update-comment@v2
              if: failure() && steps.lintCheck.outcome == 'failure'
              with:
                  issue-number: ${{ github.event.pull_request.number }}
                  body: |
                      :x: Lint 실패
            - name: Comment When UnitTest Was Failed
              uses: peter-evans/create-or-update-comment@v2
              if: failure() && (steps.apiTest.outcome == 'failure' || steps.storageTest.outcome == 'failure')
              with:
                  issue-number: ${{ github.event.pull_request.number }}
                  body: |
                      :x: Test 실패.
            - name: Comment When All Step Was Passed
              uses: peter-evans/create-or-update-comment@v2
              if: success()
              with:
                  issue-number: ${{ github.event.pull_request.number }}
                  body: |
                      :white_check_mark: CI 통과
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-northeast-2
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            - name: Build and Push Docker image to Amazon ECR
              run: ./gradlew :api:jib -Djib.from.image=openjdk:17-jdk-slim -Djib.to.image=${{secrets.ECR_IMAGE}} -Djib.to.auth.username=AWS -Djib.to.auth.password=${{ steps.ecr-login.outputs.ecr-password }} -Djib.to.tags=dev -Djib.container.jvmFlags="-Dspring.profiles.active=dev,-Dfile.encoding=UTF-8" -Djib.container.environment="DATASOURCE_URL=${{ secrets.DEV_DATASOURCE_URL}},DATASOURCE_USERNAME=${{ secrets.DEV_DATASOURCE_USERNAME }},DATASOURCE_PASSWORD=${{ secrets.DEV_DATASOURCE_PASSWORD }},KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }},KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }},server_ip=${{ secrets.SERVER_IP}}"

